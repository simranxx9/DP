int solve(int arr[],  int n, int sum )
  {
       bool dp[n+1][sum+1];
       
       for(int i = 0; i <= n; i++)
       {
           dp[i][0] = true;
       }
       for(int i =1 ; i<= sum; i++)
       {
           
           dp[0][i] = false;
       }
       
       for(int i = 1;i <= n; i++ )
       {
           for(int j =1; j<= sum; j++ )
           {
               int ans = dp[i-1][j];
               if(arr[i-1] <= j)
               {
                   dp[i][j] = ans || dp[i-1][ j - arr[i-1]];
               }
               else{
                   dp[i][j] = ans;
               }
           }
       }
       int i = 0 ,sum1 , sum2, mini = INT_MAX;
       vector<int> v;
       for(i =0 ;i <= sum/2; i++ )
       {
           if(dp[n][i]) v.push_back(i);
       }
       for(auto it: v)
       {
           sum1 = it;
           sum2 = sum - sum1;
           mini = min(mini, sum2 - sum1);
       }
       
       return mini;
  }
	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int sum =0 ;
	    for(int i =0 ; i < n; i++)
	    {
	        sum+= arr[i];
	    }
	    return solve(arr,n, sum);
	} 
