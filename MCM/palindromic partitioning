   int dp[500][500];
    int isPalindrome(string s, int i, int j)
    {
        while(i < j)
        {
            if(s[i] != s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string s, int i, int j)
    {
        if(i >= j)  return 0;
        
        if(isPalindrome(s, i, j)) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        int ans = INT_MAX;
        int left, right;
        for(int k = i; k< j; k++)
        {
            // if left sutree already has answer
            
            if(dp[i][k]!=-1)
                left = dp[i][k];
            else
                left = solve(s, i, k);
            if(dp[k+1][j]!=-1)
                right = dp[k+1][j];
            else
                right = solve(s, k+1, j);
            
            int temp = left+right + 1;
            
            ans = min(temp, ans);
        }
        return dp[i][j] = ans;
    }

    int palindromicPartition(string str)
    {
        // code here
        memset(dp, -1, sizeof(dp));
        return solve(str, 0, str.length()-1);
    }
